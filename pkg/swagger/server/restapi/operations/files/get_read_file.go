// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetReadFileHandlerFunc turns a function with the right signature into a get read file handler
type GetReadFileHandlerFunc func(GetReadFileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReadFileHandlerFunc) Handle(params GetReadFileParams) middleware.Responder {
	return fn(params)
}

// GetReadFileHandler interface for that can handle valid get read file params
type GetReadFileHandler interface {
	Handle(GetReadFileParams) middleware.Responder
}

// NewGetReadFile creates a new http.Handler for the get read file operation
func NewGetReadFile(ctx *middleware.Context, handler GetReadFileHandler) *GetReadFile {
	return &GetReadFile{Context: ctx, Handler: handler}
}

/*
	GetReadFile swagger:route GET /readFile Files getReadFile

get text and metadata of file by ID
*/
type GetReadFile struct {
	Context *middleware.Context
	Handler GetReadFileHandler
}

func (o *GetReadFile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetReadFileParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetReadFileBody get read file body
//
// swagger:model GetReadFileBody
type GetReadFileBody struct {

	// file id
	// Required: true
	FileID *string `json:"file_id"`

	// session token
	// Required: true
	SessionToken *string `json:"session_token"`

	// user id
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this get read file body
func (o *GetReadFileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFileID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSessionToken(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetReadFileBody) validateFileID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"file_id", "body", o.FileID); err != nil {
		return err
	}

	return nil
}

func (o *GetReadFileBody) validateSessionToken(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"session_token", "body", o.SessionToken); err != nil {
		return err
	}

	return nil
}

func (o *GetReadFileBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"user_id", "body", o.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get read file body based on context it is used
func (o *GetReadFileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetReadFileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetReadFileBody) UnmarshalBinary(b []byte) error {
	var res GetReadFileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
