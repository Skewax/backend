// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostNewLoginHandlerFunc turns a function with the right signature into a post new login handler
type PostNewLoginHandlerFunc func(PostNewLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostNewLoginHandlerFunc) Handle(params PostNewLoginParams) middleware.Responder {
	return fn(params)
}

// PostNewLoginHandler interface for that can handle valid post new login params
type PostNewLoginHandler interface {
	Handle(PostNewLoginParams) middleware.Responder
}

// NewPostNewLogin creates a new http.Handler for the post new login operation
func NewPostNewLogin(ctx *middleware.Context, handler PostNewLoginHandler) *PostNewLogin {
	return &PostNewLogin{Context: ctx, Handler: handler}
}

/*
	PostNewLogin swagger:route POST /newLogin Authentication postNewLogin

logs in a user from google auth state
*/
type PostNewLogin struct {
	Context *middleware.Context
	Handler PostNewLoginHandler
}

func (o *PostNewLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostNewLoginParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostNewLoginBody post new login body
//
// swagger:model PostNewLoginBody
type PostNewLoginBody struct {

	// code
	// Required: true
	Code *string `json:"code"`

	// csrf state
	// Required: true
	CsrfState *string `json:"csrf_state"`

	// hosted domain
	// Required: true
	HostedDomain *string `json:"hosted_domain"`

	// prompt
	// Required: true
	Prompt *string `json:"prompt"`

	// scope
	// Required: true
	Scope *string `json:"scope"`

	// user
	// Required: true
	User *string `json:"user"`
}

// Validate validates this post new login body
func (o *PostNewLoginBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCsrfState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHostedDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrompt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostNewLoginBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *PostNewLoginBody) validateCsrfState(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"csrf_state", "body", o.CsrfState); err != nil {
		return err
	}

	return nil
}

func (o *PostNewLoginBody) validateHostedDomain(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"hosted_domain", "body", o.HostedDomain); err != nil {
		return err
	}

	return nil
}

func (o *PostNewLoginBody) validatePrompt(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"prompt", "body", o.Prompt); err != nil {
		return err
	}

	return nil
}

func (o *PostNewLoginBody) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"scope", "body", o.Scope); err != nil {
		return err
	}

	return nil
}

func (o *PostNewLoginBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"user", "body", o.User); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post new login body based on context it is used
func (o *PostNewLoginBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostNewLoginBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostNewLoginBody) UnmarshalBinary(b []byte) error {
	var res PostNewLoginBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
