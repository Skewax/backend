// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNewLoginHandlerFunc turns a function with the right signature into a get new login handler
type GetNewLoginHandlerFunc func(GetNewLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNewLoginHandlerFunc) Handle(params GetNewLoginParams) middleware.Responder {
	return fn(params)
}

// GetNewLoginHandler interface for that can handle valid get new login params
type GetNewLoginHandler interface {
	Handle(GetNewLoginParams) middleware.Responder
}

// NewGetNewLogin creates a new http.Handler for the get new login operation
func NewGetNewLogin(ctx *middleware.Context, handler GetNewLoginHandler) *GetNewLogin {
	return &GetNewLogin{Context: ctx, Handler: handler}
}

/*
	GetNewLogin swagger:route GET /newLogin getNewLogin

GetNewLogin get new login API
*/
type GetNewLogin struct {
	Context *middleware.Context
	Handler GetNewLoginHandler
}

func (o *GetNewLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetNewLoginParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetNewLoginBadRequestBody get new login bad request body
//
// swagger:model GetNewLoginBadRequestBody
type GetNewLoginBadRequestBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this get new login bad request body
func (o *GetNewLoginBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get new login bad request body based on context it is used
func (o *GetNewLoginBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNewLoginBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNewLoginBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetNewLoginBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetNewLoginInternalServerErrorBody get new login internal server error body
//
// swagger:model GetNewLoginInternalServerErrorBody
type GetNewLoginInternalServerErrorBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this get new login internal server error body
func (o *GetNewLoginInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get new login internal server error body based on context it is used
func (o *GetNewLoginInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNewLoginInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNewLoginInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetNewLoginInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetNewLoginOKBody get new login o k body
//
// swagger:model GetNewLoginOKBody
type GetNewLoginOKBody struct {

	// error
	Error string `json:"error,omitempty"`

	// session id
	SessionID string `json:"session-id,omitempty"`

	// timeout
	Timeout int64 `json:"timeout,omitempty"`

	// user
	User *GetNewLoginOKBodyUser `json:"user,omitempty"`
}

// Validate validates this get new login o k body
func (o *GetNewLoginOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNewLoginOKBody) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(o.User) { // not required
		return nil
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNewLoginOK" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNewLoginOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get new login o k body based on the context it is used
func (o *GetNewLoginOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNewLoginOKBody) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if o.User != nil {
		if err := o.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNewLoginOK" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNewLoginOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNewLoginOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNewLoginOKBody) UnmarshalBinary(b []byte) error {
	var res GetNewLoginOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetNewLoginOKBodyUser get new login o k body user
//
// swagger:model GetNewLoginOKBodyUser
type GetNewLoginOKBodyUser struct {

	// image
	Image string `json:"image,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this get new login o k body user
func (o *GetNewLoginOKBodyUser) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get new login o k body user based on context it is used
func (o *GetNewLoginOKBodyUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNewLoginOKBodyUser) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNewLoginOKBodyUser) UnmarshalBinary(b []byte) error {
	var res GetNewLoginOKBodyUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetNewLoginRequestTimeoutBody get new login request timeout body
//
// swagger:model GetNewLoginRequestTimeoutBody
type GetNewLoginRequestTimeoutBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this get new login request timeout body
func (o *GetNewLoginRequestTimeoutBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get new login request timeout body based on context it is used
func (o *GetNewLoginRequestTimeoutBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNewLoginRequestTimeoutBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNewLoginRequestTimeoutBody) UnmarshalBinary(b []byte) error {
	var res GetNewLoginRequestTimeoutBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
