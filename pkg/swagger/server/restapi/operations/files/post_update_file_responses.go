// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Skewax/backend/pkg/swagger/server/models"
)

// PostUpdateFileOKCode is the HTTP code returned for type PostUpdateFileOK
const PostUpdateFileOKCode int = 200

/*
PostUpdateFileOK OK: updated file

swagger:response postUpdateFileOK
*/
type PostUpdateFileOK struct {

	/*
	  In: Body
	*/
	Payload *models.BasicResponse `json:"body,omitempty"`
}

// NewPostUpdateFileOK creates PostUpdateFileOK with default headers values
func NewPostUpdateFileOK() *PostUpdateFileOK {

	return &PostUpdateFileOK{}
}

// WithPayload adds the payload to the post update file o k response
func (o *PostUpdateFileOK) WithPayload(payload *models.BasicResponse) *PostUpdateFileOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post update file o k response
func (o *PostUpdateFileOK) SetPayload(payload *models.BasicResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUpdateFileOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUpdateFileBadRequestCode is the HTTP code returned for type PostUpdateFileBadRequest
const PostUpdateFileBadRequestCode int = 400

/*
PostUpdateFileBadRequest malformed/incorrect session id

swagger:response postUpdateFileBadRequest
*/
type PostUpdateFileBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.BasicResponse `json:"body,omitempty"`
}

// NewPostUpdateFileBadRequest creates PostUpdateFileBadRequest with default headers values
func NewPostUpdateFileBadRequest() *PostUpdateFileBadRequest {

	return &PostUpdateFileBadRequest{}
}

// WithPayload adds the payload to the post update file bad request response
func (o *PostUpdateFileBadRequest) WithPayload(payload *models.BasicResponse) *PostUpdateFileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post update file bad request response
func (o *PostUpdateFileBadRequest) SetPayload(payload *models.BasicResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUpdateFileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUpdateFileInternalServerErrorCode is the HTTP code returned for type PostUpdateFileInternalServerError
const PostUpdateFileInternalServerErrorCode int = 500

/*
PostUpdateFileInternalServerError internal server error

swagger:response postUpdateFileInternalServerError
*/
type PostUpdateFileInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.BasicResponse `json:"body,omitempty"`
}

// NewPostUpdateFileInternalServerError creates PostUpdateFileInternalServerError with default headers values
func NewPostUpdateFileInternalServerError() *PostUpdateFileInternalServerError {

	return &PostUpdateFileInternalServerError{}
}

// WithPayload adds the payload to the post update file internal server error response
func (o *PostUpdateFileInternalServerError) WithPayload(payload *models.BasicResponse) *PostUpdateFileInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post update file internal server error response
func (o *PostUpdateFileInternalServerError) SetPayload(payload *models.BasicResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUpdateFileInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
