// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/Skewax/backend/pkg/swagger/server/models"
)

// GetGetFilesHandlerFunc turns a function with the right signature into a get get files handler
type GetGetFilesHandlerFunc func(GetGetFilesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGetFilesHandlerFunc) Handle(params GetGetFilesParams) middleware.Responder {
	return fn(params)
}

// GetGetFilesHandler interface for that can handle valid get get files params
type GetGetFilesHandler interface {
	Handle(GetGetFilesParams) middleware.Responder
}

// NewGetGetFiles creates a new http.Handler for the get get files operation
func NewGetGetFiles(ctx *middleware.Context, handler GetGetFilesHandler) *GetGetFiles {
	return &GetGetFiles{Context: ctx, Handler: handler}
}

/*
	GetGetFiles swagger:route GET /getFiles Files getGetFiles

get all files of user
*/
type GetGetFiles struct {
	Context *middleware.Context
	Handler GetGetFilesHandler
}

func (o *GetGetFiles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetGetFilesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetGetFilesBody get get files body
//
// swagger:model GetGetFilesBody
type GetGetFilesBody struct {

	// token
	Token string `json:"token,omitempty"`

	// user id
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this get get files body
func (o *GetGetFilesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGetFilesBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"user_id", "body", o.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get get files body based on context it is used
func (o *GetGetFilesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetGetFilesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGetFilesBody) UnmarshalBinary(b []byte) error {
	var res GetGetFilesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetGetFilesOKBody get get files o k body
//
// swagger:model GetGetFilesOKBody
type GetGetFilesOKBody struct {

	// error
	Error string `json:"error,omitempty"`

	// files
	Files []*models.BasicFileObject `json:"files"`
}

// Validate validates this get get files o k body
func (o *GetGetFilesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGetFilesOKBody) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(o.Files) { // not required
		return nil
	}

	for i := 0; i < len(o.Files); i++ {
		if swag.IsZero(o.Files[i]) { // not required
			continue
		}

		if o.Files[i] != nil {
			if err := o.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getGetFilesOK" + "." + "files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getGetFilesOK" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get get files o k body based on the context it is used
func (o *GetGetFilesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGetFilesOKBody) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Files); i++ {

		if o.Files[i] != nil {
			if err := o.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getGetFilesOK" + "." + "files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getGetFilesOK" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGetFilesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGetFilesOKBody) UnmarshalBinary(b []byte) error {
	var res GetGetFilesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
