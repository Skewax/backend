// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTokenLoginHandlerFunc turns a function with the right signature into a get token login handler
type GetTokenLoginHandlerFunc func(GetTokenLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTokenLoginHandlerFunc) Handle(params GetTokenLoginParams) middleware.Responder {
	return fn(params)
}

// GetTokenLoginHandler interface for that can handle valid get token login params
type GetTokenLoginHandler interface {
	Handle(GetTokenLoginParams) middleware.Responder
}

// NewGetTokenLogin creates a new http.Handler for the get token login operation
func NewGetTokenLogin(ctx *middleware.Context, handler GetTokenLoginHandler) *GetTokenLogin {
	return &GetTokenLogin{Context: ctx, Handler: handler}
}

/*
	GetTokenLogin swagger:route GET /tokenLogin Authentication getTokenLogin

verifies a serssion token and returns user data. Will also generate a new session token and replace it
*/
type GetTokenLogin struct {
	Context *middleware.Context
	Handler GetTokenLoginHandler
}

func (o *GetTokenLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTokenLoginParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTokenLoginBody get token login body
//
// swagger:model GetTokenLoginBody
type GetTokenLoginBody struct {

	// token
	Token string `json:"token,omitempty"`

	// user id
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this get token login body
func (o *GetTokenLoginBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTokenLoginBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"user_id", "body", o.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get token login body based on context it is used
func (o *GetTokenLoginBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTokenLoginBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTokenLoginBody) UnmarshalBinary(b []byte) error {
	var res GetTokenLoginBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
