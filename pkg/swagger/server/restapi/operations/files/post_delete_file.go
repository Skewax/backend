// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostDeleteFileHandlerFunc turns a function with the right signature into a post delete file handler
type PostDeleteFileHandlerFunc func(PostDeleteFileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostDeleteFileHandlerFunc) Handle(params PostDeleteFileParams) middleware.Responder {
	return fn(params)
}

// PostDeleteFileHandler interface for that can handle valid post delete file params
type PostDeleteFileHandler interface {
	Handle(PostDeleteFileParams) middleware.Responder
}

// NewPostDeleteFile creates a new http.Handler for the post delete file operation
func NewPostDeleteFile(ctx *middleware.Context, handler PostDeleteFileHandler) *PostDeleteFile {
	return &PostDeleteFile{Context: ctx, Handler: handler}
}

/*
	PostDeleteFile swagger:route POST /deleteFile Files postDeleteFile

delete file by ID
*/
type PostDeleteFile struct {
	Context *middleware.Context
	Handler PostDeleteFileHandler
}

func (o *PostDeleteFile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostDeleteFileParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostDeleteFileBody post delete file body
//
// swagger:model PostDeleteFileBody
type PostDeleteFileBody struct {

	// file id
	// Required: true
	FileID *string `json:"file_id"`

	// session token
	// Required: true
	SessionToken *string `json:"session_token"`

	// user id
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this post delete file body
func (o *PostDeleteFileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFileID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSessionToken(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDeleteFileBody) validateFileID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"file_id", "body", o.FileID); err != nil {
		return err
	}

	return nil
}

func (o *PostDeleteFileBody) validateSessionToken(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"session_token", "body", o.SessionToken); err != nil {
		return err
	}

	return nil
}

func (o *PostDeleteFileBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"user_id", "body", o.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post delete file body based on context it is used
func (o *PostDeleteFileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostDeleteFileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDeleteFileBody) UnmarshalBinary(b []byte) error {
	var res PostDeleteFileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
