// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Skewax/backend/pkg/swagger/server/models"
)

// PostNewLoginOKCode is the HTTP code returned for type PostNewLoginOK
const PostNewLoginOKCode int = 200

/*
PostNewLoginOK OK

swagger:response postNewLoginOK
*/
type PostNewLoginOK struct {

	/*
	  In: Body
	*/
	Payload *models.LoginResponse `json:"body,omitempty"`
}

// NewPostNewLoginOK creates PostNewLoginOK with default headers values
func NewPostNewLoginOK() *PostNewLoginOK {

	return &PostNewLoginOK{}
}

// WithPayload adds the payload to the post new login o k response
func (o *PostNewLoginOK) WithPayload(payload *models.LoginResponse) *PostNewLoginOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post new login o k response
func (o *PostNewLoginOK) SetPayload(payload *models.LoginResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNewLoginOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostNewLoginBadRequestCode is the HTTP code returned for type PostNewLoginBadRequest
const PostNewLoginBadRequestCode int = 400

/*
PostNewLoginBadRequest an incorrect/incorrectly formatted ID

swagger:response postNewLoginBadRequest
*/
type PostNewLoginBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.BasicResponse `json:"body,omitempty"`
}

// NewPostNewLoginBadRequest creates PostNewLoginBadRequest with default headers values
func NewPostNewLoginBadRequest() *PostNewLoginBadRequest {

	return &PostNewLoginBadRequest{}
}

// WithPayload adds the payload to the post new login bad request response
func (o *PostNewLoginBadRequest) WithPayload(payload *models.BasicResponse) *PostNewLoginBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post new login bad request response
func (o *PostNewLoginBadRequest) SetPayload(payload *models.BasicResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNewLoginBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostNewLoginUnauthorizedCode is the HTTP code returned for type PostNewLoginUnauthorized
const PostNewLoginUnauthorizedCode int = 401

/*
PostNewLoginUnauthorized user did not grant all needed scopes

swagger:response postNewLoginUnauthorized
*/
type PostNewLoginUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.BasicResponse `json:"body,omitempty"`
}

// NewPostNewLoginUnauthorized creates PostNewLoginUnauthorized with default headers values
func NewPostNewLoginUnauthorized() *PostNewLoginUnauthorized {

	return &PostNewLoginUnauthorized{}
}

// WithPayload adds the payload to the post new login unauthorized response
func (o *PostNewLoginUnauthorized) WithPayload(payload *models.BasicResponse) *PostNewLoginUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post new login unauthorized response
func (o *PostNewLoginUnauthorized) SetPayload(payload *models.BasicResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNewLoginUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostNewLoginRequestTimeoutCode is the HTTP code returned for type PostNewLoginRequestTimeout
const PostNewLoginRequestTimeoutCode int = 408

/*
PostNewLoginRequestTimeout timeout of this ID

swagger:response postNewLoginRequestTimeout
*/
type PostNewLoginRequestTimeout struct {

	/*
	  In: Body
	*/
	Payload *models.BasicResponse `json:"body,omitempty"`
}

// NewPostNewLoginRequestTimeout creates PostNewLoginRequestTimeout with default headers values
func NewPostNewLoginRequestTimeout() *PostNewLoginRequestTimeout {

	return &PostNewLoginRequestTimeout{}
}

// WithPayload adds the payload to the post new login request timeout response
func (o *PostNewLoginRequestTimeout) WithPayload(payload *models.BasicResponse) *PostNewLoginRequestTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post new login request timeout response
func (o *PostNewLoginRequestTimeout) SetPayload(payload *models.BasicResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNewLoginRequestTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(408)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostNewLoginInternalServerErrorCode is the HTTP code returned for type PostNewLoginInternalServerError
const PostNewLoginInternalServerErrorCode int = 500

/*
PostNewLoginInternalServerError generic server error

swagger:response postNewLoginInternalServerError
*/
type PostNewLoginInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.BasicResponse `json:"body,omitempty"`
}

// NewPostNewLoginInternalServerError creates PostNewLoginInternalServerError with default headers values
func NewPostNewLoginInternalServerError() *PostNewLoginInternalServerError {

	return &PostNewLoginInternalServerError{}
}

// WithPayload adds the payload to the post new login internal server error response
func (o *PostNewLoginInternalServerError) WithPayload(payload *models.BasicResponse) *PostNewLoginInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post new login internal server error response
func (o *PostNewLoginInternalServerError) SetPayload(payload *models.BasicResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNewLoginInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
