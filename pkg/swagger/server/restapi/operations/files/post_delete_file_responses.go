// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Skewax/backend/pkg/swagger/server/models"
)

// PostDeleteFileOKCode is the HTTP code returned for type PostDeleteFileOK
const PostDeleteFileOKCode int = 200

/*
PostDeleteFileOK OK: file deleted

swagger:response postDeleteFileOK
*/
type PostDeleteFileOK struct {

	/*
	  In: Body
	*/
	Payload *models.BasicResponse `json:"body,omitempty"`
}

// NewPostDeleteFileOK creates PostDeleteFileOK with default headers values
func NewPostDeleteFileOK() *PostDeleteFileOK {

	return &PostDeleteFileOK{}
}

// WithPayload adds the payload to the post delete file o k response
func (o *PostDeleteFileOK) WithPayload(payload *models.BasicResponse) *PostDeleteFileOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post delete file o k response
func (o *PostDeleteFileOK) SetPayload(payload *models.BasicResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDeleteFileOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostDeleteFileBadRequestCode is the HTTP code returned for type PostDeleteFileBadRequest
const PostDeleteFileBadRequestCode int = 400

/*
PostDeleteFileBadRequest malformed/invalid session token

swagger:response postDeleteFileBadRequest
*/
type PostDeleteFileBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.BasicResponse `json:"body,omitempty"`
}

// NewPostDeleteFileBadRequest creates PostDeleteFileBadRequest with default headers values
func NewPostDeleteFileBadRequest() *PostDeleteFileBadRequest {

	return &PostDeleteFileBadRequest{}
}

// WithPayload adds the payload to the post delete file bad request response
func (o *PostDeleteFileBadRequest) WithPayload(payload *models.BasicResponse) *PostDeleteFileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post delete file bad request response
func (o *PostDeleteFileBadRequest) SetPayload(payload *models.BasicResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDeleteFileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostDeleteFileInternalServerErrorCode is the HTTP code returned for type PostDeleteFileInternalServerError
const PostDeleteFileInternalServerErrorCode int = 500

/*
PostDeleteFileInternalServerError generic server error

swagger:response postDeleteFileInternalServerError
*/
type PostDeleteFileInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.BasicResponse `json:"body,omitempty"`
}

// NewPostDeleteFileInternalServerError creates PostDeleteFileInternalServerError with default headers values
func NewPostDeleteFileInternalServerError() *PostDeleteFileInternalServerError {

	return &PostDeleteFileInternalServerError{}
}

// WithPayload adds the payload to the post delete file internal server error response
func (o *PostDeleteFileInternalServerError) WithPayload(payload *models.BasicResponse) *PostDeleteFileInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post delete file internal server error response
func (o *PostDeleteFileInternalServerError) SetPayload(payload *models.BasicResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDeleteFileInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
